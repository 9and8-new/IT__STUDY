Promramming Language - JAVA
Program : 앞으로(업무,일) 적어두는 작업
Pro : 앞으로, 미리, 사전의
gram : 적다, 쓰다..

computer??
compute : 계산하다
computer : 계산기

JAVA 특징
절차 + 객체지향 문법이 혼용, (비교적)플랫폼에 독립적인 언어 = 특정 플랫폼이 아닌 대부분 플랫폼혼용가능



국내 웹개발 산업시장 : JAVA기반 Framework 다수
Docker + Jenkins 
(SPRING) vs Nodejs

Project -> Propertise
File -> NEW -> java

src -> new -> packge(체크x)

컴퓨터(CPU)는 구조상 덧셈연산처리를 할 수 있다(O)
컴퓨터(CPU)는 구조상 뺄셈연산처리를 할 수 있다(X)

보수개념
7 - 4 = 3
7 + 6(4에 몇을 더해야 10이되나?) = 13 에서 증감값을 없애면 3.

57 - 34 = 23
57 + 66(34에 몇을 더해야 100이되나)? = 123 에서 증감값을 없애면 23

11111111

  00000101 = 5
 11111010 = -6 (5에대한 1의보수)
+11111011 = -5(2의보수)
---------------------------
10000000 = 0 < 증감값 1을 버림.

100000000
(앞에 1이 들어가면 음수?)
양수음수를 다 넣을 수 있는 공간이면? 음수값
음수가 지원하는 공간이면 음수임.

비트가 음수를 지원한다면
제일 왼쪽 비트값은 -로 적용된다.
=>
01111111 = 127
10000000 = -128
10000001 = -128 + 1
10000010 = -128 + 2 =
....
11111111 = -128 - 127 = -1
00000001 = 1
-------------------
00000000 = 0

파일-> 임폴트 -> 프로젝트 프롬 깃 -> Clone URI -> URI에 깃주소 넣기.
내정보 -> 셋팅 ->  Developer settings -> Personal access tokens -> classic으로 생성후 다 체크
토큰넣고 적용시킨뒤  Local Destination에서 Directoy  폴더 주소 정해서 받기.
새로운 파일은 클래스로 생성


ECLIPSE에서 PULL
=> 최상위폴더에서 우클릭 후 Team -> 클론

===============================================================
08/11
자료형

1. 정수값을 받아는 자료형 
=> byte(1byte), short,char(2byte), int(4byte.정수대표값), long(8byte) / 크기 : 1~8바이트ㅡ2진수로 저장 
| 정확하게 저장, 음수는 2의보수 |

2. 실수값을 받아오는 자료형
=> double(8byte, 실수대표형), float(4byte. 접미사f 필요) / 크기 4,8바이트 
| 근사값 저장, 오차 가능|

3. 단일문자값을 받아오는 자료형
=> 단일문자, 숫자를 c언어는 구분안하지만 java는 구분함
byte(1byte), short,char(2byte.문자대표값), int(4byte), long(8byte)

4. 문자열값 Class 자료형 
=> String(가변길이), char[]배열로 저장 | 불변 객체, 참조형 |

int( 부호지원 - 양수/음수 둘다 가능)
byte(부호지원 - 양수/음수)
00000000 00000000 00000000 10000001 (129)
11111111 11111111 11111111 01111110 (-130)

01111111 = 127
10000000 = -128

실수
= 유리수와 무리수의 통칭
소수점 값을 가지는 수 => 오차가 발생할 수 밖에 없다. 소수점은 무한함
고정소수점 : .의 위치가 고정
부동소수점(선택) : 저장되는 데이터 값에 맞게 소수점의 위치를 결졍

단정밀도?매정밀도? <-- 확인

웹계발수준에서는 통계가 잡히지않은이상 안쓰는게 좋음

클래스자료형은 위치값을 뽑아냄. 참조변수라고 함

char ch = '홍' => 2byte ' '뒤에 .을 찍으면 객체처리를 안해서 오류발생
String str = "홍" => 3byte " "뒤에 .을 찍으면 객체로 처리해서 진행가능

스트림
System.in	 : 표준 입력 스트림 생성(요청)
System.out : 표준 출력 스트림 생성(요청)

Stream : 시냇물
데이터의 논리적 이동채널(통로)
단방향성

//08-12
프로그래머스,정올,백준알고리즘 -> 코딩테스트 and 문제풀기
코알누 fast
코딩애플 => 프론트엔드

draw.io에 순서도에서 시작도형은 타원형(터미네이터)임

메서드		줄바꿈 여부	형식 지정 가능 여부	사용 예시	출력 결과 예시
print()		❌ 줄바꿈 안 함	            ❌		System.out.print("나이 : ");	나이 : (커서가 같은 줄)
println()		✅ 줄바꿈 함	 	❌		System.out.println("학교에 다닙니다.");	학교에 다닙니다.(다음 출력은 새 줄)
printf()		❌ (원하면 \n 직접 넣어야 함)		✅ (%d, %s 등 사용 가능)	System.out.printf("나이: %d세\n", age);	나이: 12세(\n 넣으면 줄바꿈)

스위치문은 무한루프용으로 많이씀.


=====================================
08.13 JAVA2

1.객체 : 존재 사물(Object) | 존재 : 특정한 형태의 공간을 차지,독적점이고 베타적인 공간차지

2.객체 구조 : 속성,기능
속성(Attribute) : 객체마다 구별되는 데이터(고유값)[저장대싱 - 변수처리]
기능(Function) :  객체가 수행할 수 있는 공통 Action(기능 - 메서드처리)

3.객체 지향 : 현실 세계의 여러 객체의 정보(속성/기능) 중에 문제 해결을 위해 필요한
일부만 추출(추상화)하여 JAVA 프로그램 내의 메모리공간에 적재(저장)하기 위해
고안된 문법 체계

4.클래스 : 분류하기위한 개념?
=> 동일한 종류의 객체에 필요한 메모리공간을 제공하기 위해 선언된 자료형
---> 객체를 생성하기 위해 만든 자료형
클래스로 객체를 생성하기 전에는 기본적으로 메모리공간을 차지하지 않는다.
(Document화 = 자바 Reflection으로 접근가능(.Class)) | 클래스는 문서로 본다?
클래스는 자료형에 의해 객체가 정의되는 순간 클래스에서 선언한 속성과 기능대로 공간형성이 이루어진다

5. 자바의 메모리 영역
1) 스택영역		: {} 내에서 생성되고 소멸되는 영역(int, double...)
2) 클래스(==메서드)영역	: 공유메모리 영역(생성자, 일반메서드. static메서드, static변수)
3) 힙영역			: 객체 저장 영역(new 예약어 사용시 할당)

public calss Ex00{
	public static void main(String [] args)
	{
		Scanner sc = new Scanner(System.in) // 생성자 함수
	}
}

Scanner(인자값) 	: 생성자 함수(객체 생성에 필요한 초기값을 부여, Size 전달)
new		: 힙(Heap)영역 객체 저장
Scanner sc	: Scanner 라는 클래스 자료형으로 정의된 참조변수 sc

힙메모리 영역에 Scanner에 필요한 초기값이 담긴 객체 생성하고
현위치(main stack)에 Scanner자료형으로 만든 sc 참조변수에
생성된 Scanner객체의 "시작 메모리 주소값"을 저장

========================================================
08/14
인자 o 반환값o
인자 x 반환값o
인자 o 반환값x
인자 x 반환값x

Class 문서화 -> 객체 생성
속성
기능(일반메서드,생성자메서드)
오버로딩(이름동일,파라미터 다양)

this예약어(생성된 객체의 위치값)

String API(내부기능 확인)
equals, contain, charAt, substring...

======================================================
08-18 배열
int arr[] = new int[3]
1차원 배열의 배열 요소는 해당 배열을 이루는 자료형 단위

intarr [][] = new int [2][3]
2차원 배열의 배열 요소는 1차원 배열

3차원 배열의 배열 요소는 2차원 배열


<cmd에서 javac 는 클래스파일 만들기>


디자인패턴
SingleTurnPatterns( Logger, 설정 객체 )

자주 발생하는 설계 문제에 대한 재사용 가능한 해결책
유지보수 용이성, 유연성, 재사용성을 높이기 위해 사용
총 3가지 유형으로 분류됨:
생성패턴 (Creational)
구조패턴 (Structural)
행위패턴 (Behavioral)

=======================
예외처리

ERROR(오류) : 정상적으로 실행되지 않는다? | 참 값(개발자의 의도한 값)과의 거리
Validation : 유효함

1. 프로그램이 작동을 못함 : 컴파일오류
2. 프로그램이 작동하다가 다른곳으로 튄다 : Bug
3. 프로그램이 작동(가다가)하다 멈춤 : Runtime오류(실행오류)
(ex 예외오류, 시스템오류)
예외오류 : 경미한 오류?

예외(Exception) : 프로그램 실행 중 예상치 못한 오류가 발생했을 때의 상황
예외 처리를 통해 프로그램이 비정상 종료되지 않도록 방지함
예외처리 : 프로그램을 실행중 예상치 못한 오류가 발생했을때 중간에 막아주는걸 의미

오류
=>	컴파일오류
	실행오류
		시스템 오류
		예외(실행중간에 막는것)
	버그

============================
JDBC
JDBC 드라이버 로딩 : 사용하고자 하는 JDBC 드라이버를 로딩한다. JDBC 드라이버는 DriverManager 클래스를 통해 로딩된다.
Connection 객체 생성 : JDBC 드라이버가 정상적으로 로딩되면 DriverManager를 통해 데이터베이스와 연결되는 세션(Session)인 Connection 객체를 생성한다.
Statement 객체 생성 : Statement 객체는 작성된 SQL 쿼리문을 실행하기 위한 객체로 정적 SQL 쿼리 문자열을 입력으로 가진다.
Query 실행 : 생성된 Statement 객체를 이용하여 입력한 SQL 쿼리를 실행한다.
ResultSet 객체로부터 데이터 조회 : 실행된 SQL 쿼리문에 대한 결과 데이터 셋이다.
ResultSet, Statement, Connection 객체들의 Close : JDBC API를 통해 사용된 객체들은 생성된 객체들을 사용한 순서의 역순으로 Close 한다.

mysql community download
에서 connect/J 클릭후 Platform Independent 클릭후 2번쨰 zip다운

시험
JDBC 드라이브 메모리 적재

COnnection 객체 생성

PerparedStatement 객체 불러옴 + SQL 쿼리문 준비

 ResultSet rs = .ececuteQuery() , int result = .executeUpdate()

while(rs.next())
{

}

close()