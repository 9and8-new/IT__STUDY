배열 : 여러 자료Type을 저장하기 위한 구조
데이터를 넣으면 계속 늘릴 수 있다.

자바는 한번에 배열을 넣을 수 없다.

------------------------------------------------
배열함수 : push, pop
push : 제일 마지막 위치에 정보를 넣는(추가)작업
pop : 제일 마지막 위치 정보를 꺼내는(날리는) 작업

검색창에 mdn 자바스크립트 배열함수 검색하면 정보를 알 수 있음

변수명.push(추가할 데이터); => 데이터를 제일 뒤에 추가
변수명.pop(); => 제일 마지막 데이터를 삭제
---------------------------------------------------
배열 함수 : forEach / 콜백함수임 => 로직을 받음
변수명.forEach((item)=>{}); / 각각의 요소는 item이라고 함

오름차순 정렬 : .sort();
변수명.sort(); --> 오름차순으로 정렬이됨.
배열은 각 요소의 문자열 변환에 따라 각 문자의 유니코드코드포인트값에 따라 정렬
복사본이 만들어지는것이 아니라 원본을 바꿈

**콜백함수는 계속 만들어봐야 작동원리를 알게됨**

filter() : Array 인스턴스의 filter() 메서드는 주어진 배열의 일부에 대한 얕은 복사본을 생성하고, 주어진 배열에서 제공된 함수에 의해 구현된 테스트를 통과한 요소로만 필터링 합니다.

let arr3 = [11,'str1',22, "str2",33, 'str3',10.5,null,true,false,undefined,101,{name:"홍길동",age:15}];

let result = arr3.filter((item)=>{return typeof item=="number"}); ==> 자료형이 number형이 맞는지 확인하는

합을 구하는 누산작업 : .reduce(()=>{},누산변수 초기값)
.reduce((누산변수)=>{},0)
ex).reduce((sum,item)=>{return sum+item;},0) => 0은 sum의 초기값임     

// 배열object 처리 [{},{},{},{}...]
        // ----------------------------------
        let arr_5 = [
            {pid:"1",pname:"모니터",price:100,amount:50},
            {pid:"2",pname:"노트북",price:200,amount:15},
            {pid:"3",pname:"냉장고",price:250,amount:30},
            {pid:"4",pname:"데스크탑",price:70,amount:19},
            {pid:"5",pname:"가습기",price:10,amount:200},];

arr_5.forEach((item)=>{console.log(item);})

arr_5.forEach(item=>{console.log(item);}) 
약식으로 item에 ()도 생략가능

arr_5.forEach((item,index)=>{console.log(index,item);}) 
index도 넣으면 배열의 순서번호도 알 수 있음.

arr_5.forEach((item,index)=>{console.log(item["price"]);})
첨자연산자[]추가 []안에 key값을 넣어 아이템의 value값들을 확인가능.

-------------------------------------------------------------------------------
재구성 배열 : .map(()=>{}) 
Array 인스턴스의 map() 메서드는 호출한 배열의 모든 요소에 주어진 함수를 호출한 결과로 채운 새로운 배열을 생성


